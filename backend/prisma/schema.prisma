// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Core Entity Models

model Organization {
  id            String   @id @default(cuid())
  name          String
  contactPerson String?
  contactEmail  String?
  contactPhone  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  events Event[]
  users  User[]

  @@map("organizations")
}

model User {
  id             String    @id @default(cuid())
  username       String    @unique
  email          String    @unique
  firstName      String
  lastName       String
  passwordHash   String
  role           String
  organizationId String?
  isActive       Boolean   @default(true)
  lastLogin      DateTime?
  phoneNumber    String?
  profileImage   String?
  permissions    String   @default("[]") // JSON string of permissions array
  createdBy      String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  organization       Organization? @relation(fields: [organizationId], references: [id])
  createdEvents      Event[]       @relation("EventCreatedBy")
  attendeeAssignments Assignment[] @relation("AssignmentCreatedBy")
  auditLogs          AuditLog[]

  @@map("users")
}

model Event {
  id                     String      @id @default(cuid())
  organizationId         String
  name                   String
  startDate              DateTime
  endDate                DateTime
  description            String?
  registrationOpenDate   DateTime?
  registrationCloseDate  DateTime?
  maxAttendees           Int?
  status                 String      @default("PLANNING")
  createdBy              String
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt

  // Relations
  organization    Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creator         User            @relation("EventCreatedBy", fields: [createdBy], references: [id])
  accommodations  Accommodation[]
  attendees       Attendee[]
  buses           Bus[]
  assignments     Assignment[]
  forms           Form[]

  @@map("events")
}

model Accommodation {
  id             String            @id @default(cuid())
  eventId        String
  name           String
  address        String?
  type           String
  contactPerson  String?
  contactPhone   String?
  totalCapacity  Int?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  // Relations
  event     Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  buildings Building[]

  @@map("accommodations")
}

model Building {
  id              String   @id @default(cuid())
  accommodationId String
  name            String
  description     String?
  totalFloors     Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  accommodation Accommodation @relation(fields: [accommodationId], references: [id], onDelete: Cascade)
  rooms         Room[]

  @@map("buildings")
}

model Room {
  id                      String     @id @default(cuid())
  buildingId              String
  number                  String
  capacity                Int
  genderType              String
  floor                   Int
  isAvailable             Boolean    @default(true)
  isGroundFloorSuitable   Boolean    @default(false)
  isVIP                   Boolean    @default(false)
  notes                   String?
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt

  // Relations
  building              Building              @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  attendees             Attendee[]
  roomAssignments       RoomAssignment[]

  @@unique([buildingId, number])
  @@map("rooms")
}

model Attendee {
  id               String               @id @default(cuid())
  eventId          String
  firstName        String
  lastName         String
  gender           String
  age              Int?
  church           String?
  region           String?
  phoneNumber      String?
  email            String?
  roomId           String?
  isLeader         Boolean              @default(false)
  isElderly        Boolean              @default(false)
  isVIP            Boolean              @default(false)
  specialRequests  String?
  registrationDate DateTime             @default(now())
  status           String       @default("REGISTERED")
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt

  // Relations
  event              Event                @relation(fields: [eventId], references: [id], onDelete: Cascade)
  room               Room?                @relation(fields: [roomId], references: [id])
  preferences        AttendeePreference[] @relation("AttendeePreferences")
  preferredBy        AttendeePreference[] @relation("PreferredAttendee")
  familyMembers      AttendeePreference[] @relation("FamilyHead")
  busAssignments     BusAssignment[]
  roomAssignments    RoomAssignment[]
  assignments        Assignment[]

  @@map("attendees")
}

model AttendeePreference {
  id                   String  @id @default(cuid())
  attendeeId           String
  preferredAttendeeId  String?
  isFamily             Boolean @default(false)
  familyHeadAttendeeId String?

  // Relations
  attendee         Attendee  @relation("AttendeePreferences", fields: [attendeeId], references: [id], onDelete: Cascade)
  preferredAttendee Attendee? @relation("PreferredAttendee", fields: [preferredAttendeeId], references: [id])
  familyHead       Attendee? @relation("FamilyHead", fields: [familyHeadAttendeeId], references: [id])

  @@map("attendee_preferences")
}

model Bus {
  id               String   @id @default(cuid())
  eventId          String
  number           String
  capacity         Int
  gatheringArea    String
  driverName       String?
  driverPhone      String?
  route            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  event          Event           @relation(fields: [eventId], references: [id], onDelete: Cascade)
  busAssignments BusAssignment[]

  @@unique([eventId, number])
  @@map("buses")
}

model BusAssignment {
  id         String   @id @default(cuid())
  busId      String
  attendeeId String
  seatNumber String?
  assignedAt DateTime @default(now())

  // Relations
  bus      Bus      @relation(fields: [busId], references: [id], onDelete: Cascade)
  attendee Attendee @relation(fields: [attendeeId], references: [id], onDelete: Cascade)

  @@unique([busId, attendeeId])
  @@unique([busId, seatNumber])
  @@map("bus_assignments")
}

model RoomAssignment {
  id         String   @id @default(cuid())
  roomId     String
  attendeeId String
  assignedAt DateTime @default(now())
  assignedBy String
  notes      String?

  // Relations
  room     Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  attendee Attendee @relation(fields: [attendeeId], references: [id], onDelete: Cascade)

  @@unique([roomId, attendeeId])
  @@map("room_assignments")
}

model Assignment {
  id         String   @id @default(cuid())
  eventId    String
  attendeeId String
  roomId     String?
  busId      String?
  assignedBy String
  assignedAt DateTime @default(now())
  notes      String?

  // Relations
  event    Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  attendee Attendee @relation(fields: [attendeeId], references: [id], onDelete: Cascade)
  assignedByUser User @relation("AssignmentCreatedBy", fields: [assignedBy], references: [id])

  @@unique([eventId, attendeeId])
  @@map("assignments")
}

// Form Builder Models

model Form {
  id          String       @id @default(cuid())
  eventId     String
  title       String
  description String?
  fields      String       // JSON array of form fields
  settings    String       // JSON object for form settings
  isPublished Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  event     Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  responses FormResponse[]

  @@map("forms")
}

model FormResponse {
  id        String   @id @default(cuid())
  formId    String
  data      String   // JSON object containing form data
  createdAt DateTime @default(now())

  // Relations
  form Form @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@map("form_responses")
}

// Audit and Logging

model AuditLog {
  id        String     @id @default(cuid())
  userId    String?
  action    String
  resource  String
  resourceId String?
  oldData   String?    // JSON
  newData   String?    // JSON
  timestamp DateTime   @default(now())
  ipAddress String?
  userAgent String?

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

// SQLite doesn't support enums, using String with validation in application layer
// Valid values:
// UserRole: SUPER_ADMIN, ORG_ADMIN, ORGANIZER, ASSISTANT, COORDINATOR, VIEWER, GUEST, ADMIN
// EventStatus: PLANNING, REGISTRATION_OPEN, REGISTRATION_CLOSED, COMPLETED
// AccommodationType: HOTEL, HOUSE
// GenderType: MALE, FEMALE, MIXED, FAMILY
// Gender: MALE, FEMALE
// AttendeeStatus: REGISTERED, CONFIRMED, CHECKED_IN, CHECKED_OUT
